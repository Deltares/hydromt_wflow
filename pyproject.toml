[build-system]
requires      = ["flit_core >=3.4.0,<4"]
build-backend = "flit_core.buildapi"

[project]
name = "hydromt_wflow"
authors = [
  { name = "Dirk Eilander", email = "dirk.eilander@deltares.nl" },
  { name = "Hélène Boisgontier", email = "helene.boisgontier@deltares.nl" },
  { name = "Joost Buitink", email = "joost.buitink@deltares.nl" },
  { name = "Brendan Dalmijn", email = "brendan.dalmijn@deltares.nl" },
]
dependencies = [
  "dask",
  "geopandas>=0.10",
  "hydromt>=v1.0.0,<2",
  "netcdf4",
  "numpy",
  "pandas",
  "pyflwdir>=0.5.7",
  "pyproj",
  "scipy",
  "shapely",
  "toml",
  "xarray",
]

requires-python = ">=3.10"
readme          = "README.rst"

classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "Intended Audience :: Science/Research",
  "Topic :: Scientific/Engineering :: Hydrology",
  "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
  "Programming Language :: Python :: 3",
]
dynamic = ['version', 'description']

[project.optional-dependencies]
io = ["requests"]
extra = ["hydroengine", "gwwapi", "pyet"]
dev = ["ruff", "pre-commit", "pip>=23.1.2"]
test = [
  "pytest>=2.7.3",
  "pytest-timeout",
  "pytest-cov",
  "pytest-mock",
  "hydromt_wflow[dev, extra]",
]
doc = [
  "nbsphinx",
  "sphinx",
  "sphinx_design",
  "pydata-sphinx-theme",
  "sphinx_autosummary_accessors",
  "hydromt_wflow[examples,extra]",
]
examples = [
  "jupyterlab",
  "cartopy",
  "nbconvert==7.13.1", # Pin as of (02-2024); 7.14 onwards causes issues with the progressbar in example notebooks. See issue #233 for more info (https://github.com/Deltares/hydromt_wflow/issues/233).
  "notebook",
]

full = ["hydromt_wflow[io,extra,dev,test,doc,examples]"]
slim = ["hydromt_wflow[io,extra,examples]"]

[project.urls]
Documentation = "http://deltares.github.io/hydromt_wflow/latest/"
Source        = "https://github.com/Deltares/hydromt_wflow"

[project.entry-points."hydromt.models"]
wflow          = "hydromt_wflow.wflow:WflowModel"
wflow_sediment = "hydromt_wflow.wflow_sediment:WflowSedimentModel"

[tool.make_env]
channels = ["conda-forge"]
conda_only_deps = [
  "gdal",
  "pcraster"
]
deps_not_in_conda = [
  "gwwapi",
  "hydroengine",
  "sphinx_autosummary_accessors",
  "sphinx_design",
  "pyet",
]
[tool.ruff]
line-length = 88
exclude     = ["docs", "examples"]

[tool.ruff.lint]
# enable pydocstyle (E), pyflake (F) and isort (I), pytest-style (PT)
select = ["E", "F", "I", "PT", "D"]
ignore = ["D211", "D213", "E741", "D105", "E712"]

[tool.ruff.format]
quote-style                = "double"
indent-style               = "space"
docstring-code-format      = true
docstring-code-line-length = 20

[tool.ruff.lint.per-file-ignores]
"tests/**"                            = ["D103", "D100", "D104"]
"hydromt_wflow/__init__.py"           = ["E402", "F401", "F403"]
"hydromt_wflow/workflows/__init__.py" = ["F403"]
"tests/conftest.py"                   = ["E402"]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.flit.sdist]
include = ["hydromt_wflow"]
exclude = ["docs", "examples", "envs", "tests", "binder", ".github"]

[tool.pytest.ini_options]
filterwarnings = [
  "ignore:distutils Version classes are deprecated:DeprecationWarning",
  "ignore:The staticmaps property:DeprecationWarning",
  "ignore:The staticgeoms property:DeprecationWarning",
]

[tool.pixi.project]
channels  = ["conda-forge"]
platforms = ["linux-64", "win-64"]

[tool.pixi.pypi-dependencies]
hydromt_wflow = { path = ".", editable = true }

[tool.pixi.feature.py310.dependencies]
python = "3.10.*"

[tool.pixi.feature.py311.dependencies]
python = "3.11.*"

[tool.pixi.feature.py312.dependencies]
python = "3.12.*"

[tool.pixi.feature.py313.dependencies]
python = "3.13.*"

[tool.pixi.feature.extra.dependencies]
gdal     = "<=3.8" # pin is necesary to avoid dependency conflict with numba re numpy 2.2.4
pcraster = "*"

[tool.pixi.environments]
default = { features = [
  "py312",
  "io",
  "extra",
  "dev",
  "test",
  "doc",
  "examples",
] }
py310 = { solve-group = "py310", features = [
  "py310",
  "io",
  "extra",
  "dev",
  "test",
  "doc",
  "examples",
] }
py311 = { solve-group = "py311", features = [
  "py311",
  "io",
  "extra",
  "dev",
  "test",
  "doc",
  "examples",
] }
py312 = { solve-group = "py312", features = [
  "py312",
  "io",
  "extra",
  "dev",
  "test",
  "doc",
  "examples",
] }
py313 = { solve-group = "py313", features = [
  "py313",
  "io",
  "extra",
  "dev",
  "test",
  "doc",
  "examples",
] }
[tool.pixi.tasks]
install = { depends-on = ["install-pre-commit"] }
install-pre-commit = "pre-commit install"
lint = { cmd = [
  "pre-commit",
  "run",
  "--all",
], depends-on = [
  'install-pre-commit',
] }

doctest = { cmd = [
  "sphinx-build",
  "-M",
  "doctest",
  "docs",
  "docs/_build",
  "-W",
] }
docs-build = { cmd = [
  "sphinx-build",
  "-M",
  "html",
  "docs",
  "docs/_build",
  "-W",
], depends-on = [
  "doctest",
] }

docs  = { depends-on = ["docs-build"] }                                     # alias
doc   = { depends-on = ["docs-build"] }                                     # alias
serve = { cmd = ["python", "-m", "http.server", "-d", "docs/_build/html"] }


# clean
clean = { depends-on = [
  "clean-dist",
  "clean-docs-generated",
  "clean-docs-build",
  "clean-docs-examples",
] }

clean-dist            = { cmd = ["rm", "-rf", "dist"] }
clean-docs-generated = { cmd = ["rm", "-rf", "docs/_generated"] }
clean-docs-build     = { cmd = ["rm", "-rf", "docs/_build"] }
clean-docs-examples  = { cmd = ["rm", "-rf", "docs/examples"] }

test          = { cmd = ["pytest"] }
test-lf       = { cmd = ["pytest", "--lf", "--tb=short"] }
test-err-warn = { cmd = ["pytest", "--tb=short", "-W", "error"] }

test-cov = { cmd = [
  "pytest",
  "--verbose",
  "--cov=hydromt",
  "--cov-report",
  "xml",
] }

mypy = "mypy ."
